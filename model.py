from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey,TEXT,TIMESTAMP
from sqlalchemy.orm import relationship

Base = declarative_base()

class Repository(Base):
    __tablename__ = 'item'
    id = Column(Integer, primary_key=True) 
    node_id = Column(TEXT, nullable=False)
    name = Column(TEXT, nullable=False)
    full_name = Column(TEXT, nullable=False)
    private = Column(Boolean, nullable=False)
    html_url = Column(TEXT, nullable=False)
    description = Column(TEXT, nullable=False)
    fork = Column(Boolean, nullable=False)
    url = Column(TEXT, nullable=False)
    forks_url = Column(TEXT, nullable=False)
    keys_url = Column(TEXT, nullable=False)
    collaborators_url = Column(TEXT, nullable=False)
    teams_url = Column(TEXT, nullable=False)
    hooks_url = Column(TEXT, nullable=False)
    issue_events_url = Column(TEXT, nullable=False)
    events_url = Column(TEXT, nullable=False)
    assignees_url = Column(TEXT, nullable=False)
    branches_url = Column(TEXT, nullable=False)
    tags_url = Column(TEXT, nullable=False)
    blobs_url = Column(TEXT, nullable=False)
    git_tags_url = Column(TEXT, nullable=False)
    git_refs_url = Column(TEXT, nullable=False)
    trees_url = Column(TEXT, nullable=False)
    statuses_url = Column(TEXT, nullable=False)
    languages_url = Column(TEXT, nullable=False)
    stargazers_url = Column(TEXT, nullable=False)
    contributors_url = Column(TEXT, nullable=False)
    subscribers_url = Column(TEXT, nullable=False)
    subscription_url = Column(TEXT, nullable=False)
    commits_url = Column(TEXT, nullable=False)
    git_commits_url = Column(TEXT, nullable=False)
    comments_url = Column(TEXT, nullable=False)
    issue_comment_url = Column(TEXT, nullable=False)
    contents_url = Column(TEXT, nullable=False)
    compare_url = Column(TEXT, nullable=False)
    merges_url = Column(TEXT, nullable=False)
    archive_url = Column(TEXT, nullable=False)
    downloads_url = Column(TEXT, nullable=False)
    issues_url = Column(TEXT, nullable=False)
    pulls_url = Column(TEXT, nullable=False)
    milestones_url = Column(TEXT, nullable=False)
    notifications_url = Column(TEXT, nullable=False)
    labels_url = Column(TEXT, nullable=False)
    releases_url = Column(TEXT, nullable=False)
    deployments_url = Column(TEXT, nullable=False)
    created_at = Column(TIMESTAMP, nullable=False)
    updated_at= Column(TIMESTAMP, nullable=False)
    pushed_at = Column(TIMESTAMP, nullable=False)
    git_url = Column(TEXT, nullable=False)
    ssh_url = Column(TEXT, nullable=False)
    clone_url = Column(TEXT, nullable=False)
    svn_url = Column(TEXT, nullable=False)
    homepage = Column(TEXT, nullable=False)
    size = Column(Integer)
    stargazers_count = Column(TEXT, nullable=False)
    watchers_count = Column(TEXT, nullable=False)
    language= Column(TEXT, nullable=False)
    has_issues = Column(Boolean, nullable=False)
    has_projects = Column(Boolean, nullable=False)
    has_downloads= Column(Boolean, nullable=False)
    has_wiki = Column(Boolean, nullable=False)
    has_pages = Column(Boolean, nullable=False)
    has_discussions= Column(Boolean, nullable=False,default=True)
    forks_count = Column(Integer)
   
    license1_id = Column(Integer, ForeignKey("license.id"), nullable=False)
    license = relationship("License", foreign_keys='Repository.license1_id')
    owner1_id = Column(Integer,ForeignKey("owner.owner_id"), nullable=False)
    owner = relationship("Owner",foreign_keys='Repository.owner1_id')

    def __repr__(self):
        return "<Repository(id={},node_id='{}', name='{}', fullname='{}',private={},html_url='{}',description='{}',fork={},url='{}',forks_url='{}',owner1_id={},license1_id={})>"\
            .format(self.id, self.node_id, self.name, self.full_name, self.private,self.html_url,self.description,self.fork,self.url,self.forks_url,self.owner1_id,self.license1_id)

class License(Base):
    __tablename__ = 'license'
    id = Column(Integer, primary_key=True)
    key = Column(TEXT, nullable=False)
    name = Column(TEXT, nullable=False)
    spdx_id = Column(TEXT, nullable=False)
    node_id = Column(TEXT, nullable=False)
    url = Column(TEXT)

    def __repr__(self):
        return "<License(id={}, node_id='{}', name='{}', key='{}', spdx_id={}, url={})>"\
                .format(self.id, self.node_id, self.name, self.key, self.spdx_id,self.url)
class Owner(Base):
    __tablename__ = 'owner'
    owner_id = Column(Integer, primary_key=True)
    login = Column(TEXT, nullable=False)
    id  =  Column(Integer, nullable=False)
    node_id = Column(TEXT, nullable=False)
    avatar_url = Column(TEXT, nullable=False)
    gravatar_id = Column(TEXT, nullable=False)
    url = Column(TEXT, nullable=False)
    html_url = Column(TEXT, nullable=False)
    followers_url = Column(TEXT, nullable=False)
    following_url = Column(TEXT, nullable=False)
    gists_url = Column(TEXT, nullable=False)
    starred_url = Column(TEXT, nullable=False)
    subscriptions_url = Column(TEXT, nullable=False)
    organizations_url = Column(TEXT, nullable=False)
    repos_url = Column(TEXT, nullable=False)
    events_url = Column(TEXT, nullable=False)
    received_events_url = Column(TEXT, nullable=False)
    type = Column(TEXT, nullable=False)
    site_admin = Column(Boolean, nullable=False)

    def __repr__(self):
        return "<owner(owner_id={}, login='{}',id='{}', node_id='{}', avatar_url={}, gravatar_id={}, url={},html_url={},followers_url={},following_url={},gists_url={},starred_url={},subscriptions_url={},organizations_url={},repos_url={},events_url={},received_events_url={},type={},site_admin={})>"\
                .format(self.owner_id, self.login, self.id, self.node_id, self.avatar_url, self.gravatar_id, self.url,self.html_url,self.followers_url,self.following_url,self.gists_url,self.starred_url,self.subscriptions_url,self.organizations_url,self.repos_url,self.events_url,self.received_events_url,self.type,self.site_admin)
                